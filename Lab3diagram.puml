@startuml
class World.World {
+ ArrayList<Place> places
- ArrayList<Human> humans
~ Time time
+ void putPeople(Human)
+ String toString()
}
class World.World$Time {
- Day_time time
+ void setTime(Day_time)
}
enum World.Day_time {
+  MORNING
+  AFTERNOON
+  EVENING
+  NIGHT
- String time
+ String toString()
}
abstract class Subject.Lights.Light {
~ int brightness
~ String name
~ int T
}
interface Humanity.Interfaces.Walk {
~ void go(Direction)
}
class Subject.Patno {
~ int size
~ int brightness
+ int getSize()
+ int getBrightness()
+ void setSize(int)
+ void setBrightness(int)
+ void newview(Human,Human)
+ String toString()
}
enum Humanity.Enums.HeadPosition {
+  SRTAIGHT
+  DOWN
+  BACK
+  TO_SIDE
- String position
+ String toString()
}
class Subject.Tree.Vetki {
+ void sound(Human)
+ String toString()
+ String anotherForm()
+ String anotherForm2()
}
class Main {
+ {static} void main(String[])
}
class Subject.Lights.Fake_light {
+ void shine(Bones,Trees,Vetki)
}
class Subject.Valeshnik {
+ void applyDamage(Human)
+ String crush()
+ String toString()
}
enum World.Place {
+  TOP
+  FLASHLIGHT
+  CENTRE_OF_HEAP
+  UNKNOWN
+  BORDER
}
class Humanity.Luis {
+ void thinking(String)
+ void decides(String)
+ String reflections()
+ void ConfidenceMan()
+ void WarinesseMan()
+ void sighed()
+ void fall()
+ void exchange(Lopata,Pakagee)
+ void look()
+ void feel()
+ void see(Human)
+ void stand(Stvol)
}
class Humanity.Dgud {
+ void go(Direction)
+ void ConfidenceMan()
+ void stand(Stvol)
+ void see(Human)
+ String toString()
}
class Subject.Tree.Trees {
~ String title
+ void sound(Human)
+ String hasTitle()
+ String toString()
}
enum Humanity.Enums.Condition {
+  GOOD
+  INATTENTIVE
+  CONFIDENCE
+  ILL
}
interface Humanity.Interfaces.BrainProcesses {
~ void thinking(String)
~ void decides(String)
}
class Subject.Lopata {
+ Body location
+ Body getlocation()
+ void setlocation(Body)
+ void exchange(Lopata,Pakagee)
+ String toString()
}
class Subject.Bones {
+ String toString()
}
class Subject.Pakagee {
+ Body location
+ Body getlocation()
+ void setlocation(Body)
+ String toString()
}
enum Humanity.Enums.Body {
+  L_ARM
+  R_ARM
+  LEGS
+  HAIR
- String bodypart
+ String toString()
}
interface Humanity.Interfaces.Head {
+ void turnHead(HeadPosition)
}
class Subject.Wind {
+ void howl(Vetki,Trees)
+ void touch(Human)
+ String toString()
}
class Humanity.Author {
- String comment
+ void comment(String)
}
abstract class Humanity.Human {
+ String name
- int x
- int y
# int health
# Condition condition
# Place place
# HeadPosition position
+ String getName()
+ Condition getCondition()
+ void setCondition(Condition)
+ Place getPlace()
+ void setPlace(Place)
+ int getHealth()
+ int setHealth(int)
+ int getx()
+ int gety()
+ void setx(int)
+ void sety(int)
+ HeadPosition getHeadPosition()
+ void setHeadPosition(HeadPosition)
+ void turnHead(HeadPosition)
+ void go(Direction)
+ void location()
+ {abstract}void ConfidenceMan()
+ {abstract}void stand(Stvol)
+ {abstract}void see(Human)
+ void chekplace()
+ void goAfter(Human,Human)
+ void be_health()
+ String toString()
+ int hashCode()
+ boolean equals(Object)
}
enum Humanity.Enums.Direction {
+  LEFT
+  RIGHT
+  UP
+  DOWN
}
class Subject.Tree.Stvol {
+ void sound(Human)
+ String toString()
}
class Subject.Lights.Natural_light {
+ void shine(Vetki)
}


World.World +.. World.World$Time
Subject.Tree.Trees <|-- Subject.Tree.Vetki
Subject.Lights.Light <|-- Subject.Lights.Fake_light
Humanity.Interfaces.BrainProcesses <|.. Humanity.Luis
Humanity.Human <|-- Humanity.Luis
Humanity.Human <|-- Humanity.Dgud
Humanity.Interfaces.Head <|.. Humanity.Human
Humanity.Interfaces.Walk <|.. Humanity.Human
Subject.Tree.Trees <|-- Subject.Tree.Stvol
Subject.Lights.Light <|-- Subject.Lights.Natural_light
@enduml