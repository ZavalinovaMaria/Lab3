@startuml
interface humans.interfaces.CheckBrain {
~ void checkBrainSignals()
}
interface humans.interfaces.BrainActions {
~ void think(String)
~ void feel(boolean)
}
class subject.Tree {
~ String title
+ double volume
+ int perscentOfIllumination
+ void makeSound()
+ int getPerscentOfIllumination()
+ void setPerscentOfIllumination(int)
+ String toString()
}
class subject.Tree$Trunk {
+ String toString()
}
class subject.Tree$Branch {
+ String toString()
+ String anotherForm()
}
class subject.Noise {
~ double probability
}
class subject.lights.NaturalLight {
+ void shine(Tree.Branch)
}
interface humans.interfaces.Go {
~ void go(Direction)
~ void walk(Way,Place)
}
class subject.Brushwood {
+ void applyDamage(Human)
+ String toString()
}
abstract class humans.Human {
+ String name
- int x
- int y
# int health
# Condition condition
# Place place
# Head head
# LeftArm leftArm
# RightArm rightArm
# Leg rightLeg
# Leg leftLeg
# Lungs lungs
# boolean knowledge
+ ArrayList<Integer> brainSignals
~ Medicine pill
~ Medicine potion
+ String getName()
+ Condition getCondition()
+ void setCondition(Condition)
+ Place getPlace()
+ void setPlace(Place)
+ int getHealth()
+ void setHealth(double)
+ int getX()
+ int getY()
+ void setX(int)
+ void setY(int)
+ boolean getKnowledge()
+ void setKnowledge(boolean)
+ void takeRequirement()
+ void checkRequirement()
+ void turnHead(Direction)
+ void go(Direction)
+ void checkPlace()
+ void checkUnknownPlace()
+ {abstract}void walk(Way,Place)
+ {abstract}void stand(Tree)
+ {abstract}void fall()
+ void wakeUp()
+ void know(Way,Place)
+ void feel(boolean)
+ void hearSound(Tree)
+ void hear(Tree,Human)
+ void checkHealth()
+ void takePill()
+ void checkBrainSignals()
+ void takeToRightArm(Subjects)
+ void takeToLeftArm(Subjects)
+ void replaceSubjects()
+ RightArm getRightArm()
+ LeftArm getLeftArm()
+ Leg getLeftLeg()
+ Leg getRightLeg()
+ Lungs getLungs()
+ Head getHead()
+ String toString()
+ int hashCode()
+ boolean equals(Object)
}
interface humans.Human$Medicine {
~ void recoverHealth()
}
class humans.Human$LeftArm {
+ ArrayList<Subjects> leftArmsSubjects
+ void haveSubject(Subjects)
}
class humans.Human$RightArm {
+ ArrayList<Subjects> rightArmsSubjects
~ {static} int count
+ void checkCountR()
+ void haveSubject(Subjects)
}
class humans.Human$Head {
# double degreeToSide
# double degreeUpDown
+ double getDegreeToSide()
+ double getDegreeUpDown()
+ void setDegreeToSide(double)
+ void setDegreeUpDown(double)
}
class humans.Human$Leg {
# double heightLift
# double degrees
# double distanceToAnotherLeg
+ double getHeightLift()
+ void setHeightLift(double)
+ double getDegrees()
+ void setDegrees(double)
+ double getDistanceToAnotherLeg()
+ void setDistanceToAnotherLeg(double)
+ void setDistanceBetweenLegs(Leg,double)
+ String toString()
}
class humans.Human$Lungs {
~ int volume
+ int getVolume()
+ void setVolume(int)
}
abstract class subject.lights.Light {
# int brightness
~ String name
# int period
# int time
+ void shineToTree(Tree)
+ void shineToSubject(Subjects)
+ String lightCharacteristic()
}
class subject.lights.Light$Spot {
- double size
- double brightness
+ double getSize()
+ double getBrightness()
+ void setSize(double)
+ void setBrightness(double)
+ void newView(Human,Human)
+ String toString()
}
interface humans.interfaces.Look {
~ void look()
}
class Main {
+ {static} void main(String[])
}
class subject.Wind {
~ double volume
~ double power
+ void howl(Tree.Branch,Tree)
+ boolean touch(Human)
+ String toString()
}
class exception.HumanWithoutPlaceException {
}
interface subject.interfaces.Touch {
~ boolean touch(Human)
}
class world.Way {
+ ArrayList<Direction> wayFromCentreToTop
+ ArrayList<Direction> wayFromTopToPlain
}
enum humans.enums.Condition {
+  GOOD
+  UNSERTAIN
+  CONFIDENCE
+  SLEEP
- double receptivity
+ double getReceptivity()
}
interface subject.interfaces.ApplyDamage {
~ void applyDamage(Human)
}
interface humans.interfaces.TakeToArm {
~ void takeToRightArm(Subjects)
~ void takeToLeftArm(Subjects)
~ void replaceSubjects()
}
class subject.lights.FakeLight {
+ void shine(Subjects,Tree,Tree.Branch)
}
interface humans.interfaces.Hear {
~ void hear(Tree,Human)
}
class exception.LowSoundException {
+ {static} int count
}
interface humans.interfaces.GoAfter {
~ void goAfter(Way,Human,Human)
}
interface humans.interfaces.Fall {
~ void fall()
}
interface humans.interfaces.CheckHealth {
~ void checkHealth()
}
interface humans.interfaces.CheckLocation {
~ void checkPlace()
}
class subject.Subjects {
~ String name
~ int weight
+ int perscentOfIllumination
+ int getWeight()
+ int getPerscentOfIllumination()
+ void setPerscentOfIllumination(int)
+ String toString()
}
enum humans.enums.Direction {
+  LEFT
+  RIGHT
+  UP
+  STRAIGHT
+  DOWN
}
enum world.Day_time {
+  MORNING
+  AFTERNOON
+  EVENING
+  NIGHT
- String time
+ String toString()
}
interface humans.interfaces.TurnHead {
~ void turnHead(Direction)
}
interface humans.interfaces.Know {
~ {abstract}void know(Way,Place)
}
interface subject.interfaces.MakeSound {
~ void makeSound()
}
enum world.Place {
+  TOP
+  FLASHLIGHT
+  LEFT_SLOPE
+  MIDDLE_SLOPE
+  RIGHT_SLOPE
+  CENTRE_OF_HEAP
+  PLAIN_1
+  PLAIN_2
+  BORDER
- int coordinateX
- int coordinateY
+ int getCoordinateX()
+ int getCoordinateY()
}
class exception.InvalidValueException {
}
class humans.Dgud {
+ void stand(Tree)
+ void see(World,Light.Spot,Human,Human)
+ void walk(Way,Place)
+ void fall()
}
class world.World {
+ {static} int sizeOfHumans
+ ArrayList<Place> places
- ArrayList<Human> humans
+ Day_time time
+ void putPeople(Human)
+ void putPlaces(Place)
+ void setTime(Day_time)
+ Day_time getTime()
+ void newDayTime(Human)
+ String toString()
}
class humans.Luis {
+ void goAfter(Way,Human,Human)
+ void sigh()
+ void walk(Way,Place)
+ void fall()
+ void look()
+ void see(Human,World)
+ void stand(Tree)
+ void think(String)
}
interface humans.interfaces.Sigh {
~ void sigh()
}


subject.interfaces.MakeSound <|.. subject.Tree
subject.Tree +.. subject.Tree$Trunk
subject.Tree <|-- subject.Tree$Trunk
subject.Tree +.. subject.Tree$Branch
subject.Tree <|-- subject.Tree$Branch
subject.lights.Light <|-- subject.lights.NaturalLight
subject.interfaces.ApplyDamage <|.. subject.Brushwood
humans.TurnHead <|.. humans.Human
humans.Go <|.. humans.Human
humans.Hear <|.. humans.Human
humans.BrainActions <|.. humans.Human
humans.Know <|.. humans.Human
humans.CheckBrain <|.. humans.Human
humans.CheckLocation <|.. humans.Human
humans.CheckHealth <|.. humans.Human
humans.Fall <|.. humans.Human
humans.TakeToArm <|.. humans.Human
humans.Human +.. humans.Human$Medicine
humans.Human +.. humans.Human$LeftArm
humans.Human +.. humans.Human$RightArm
humans.Human +.. humans.Human$Head
humans.Human +.. humans.Human$Leg
humans.Human +.. humans.Human$Lungs
subject.lights.Light +.. subject.lights.Light$Spot
subject.Touch <|.. subject.Wind
exception.RuntimeException <|-- exception.HumanWithoutPlaceException
subject.lights.Light <|-- subject.lights.FakeLight
exception.Exception <|-- exception.LowSoundException
exception.Exception <|-- exception.InvalidValueException
humans.Human <|-- humans.Dgud
humans.Sigh <|.. humans.Luis
humans.Look <|.. humans.Luis
humans.GoAfter <|.. humans.Luis
humans.Human <|-- humans.Luis
@enduml